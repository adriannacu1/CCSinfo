#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <WebServer.h>

// WiFi credentials
const char* ssid = "KyrieJ";           
const char* password = "maytwo@2015Seron";   

// Flask server details - Updated to your correct IP
String flaskServerIP = "192.168.1.9";  // Your PC's IP address
int flaskServerPort = 5000;

// Web server for ESP32
WebServer server(80);

// Sensor pins
int sensorPin0 = 34;  
int sensorPin1 = 35;  
int sensor0 = 1000;
int sensor1 = 1000;

// Laser control pin
int sensorControlPin = 2;  

float threshold0 = 1000;  
float threshold1 = 1000;  
int sent = 0;
bool wifiConnected = false;
unsigned long lastDataSent = 0;
int connectionFailures = 0;

// Detection parameters
int detectionMargin = 50;  // Sensitivity margin for detection
int consecutiveReadings = 1; // Number of consecutive readings needed to confirm detection
int currentConsecutive = 0;

void setup() {
  Serial.begin(115200);
  
  // Initialize pins
  pinMode(sensorPin0, INPUT);
  pinMode(sensorPin1, INPUT);
  pinMode(sensorControlPin, OUTPUT);
  digitalWrite(sensorControlPin, HIGH);
  
  // Connect to WiFi
  connectToWiFi();
  
  // Setup web server routes
  setupWebServer();
  
  // Test connectivity
  if (wifiConnected) {
    delay(2000);
    testFlaskConnectivity();
  }
  
  // Calibration
  calibrateSensors();
  
  Serial.println("ESP32 ready!");
  Serial.println("Flask server: http://" + flaskServerIP + ":" + String(flaskServerPort));
  Serial.println("‚ö†Ô∏è  DUAL SENSOR MODE: Both sensors must be blocked to trigger alarm");
}

void connectToWiFi() {
  Serial.print("Connecting to WiFi: ");
  Serial.println(ssid);
  
  WiFi.begin(ssid, password);
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 30) {
    delay(1000);
    Serial.print(".");
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    wifiConnected = true;
    Serial.println();
    Serial.println("‚úÖ WiFi connected!");
    Serial.print("ESP32 IP address: ");
    Serial.println(WiFi.localIP());
    Serial.print("Gateway: ");
    Serial.println(WiFi.gatewayIP());
    Serial.print("DNS: ");
    Serial.println(WiFi.dnsIP());
  } else {
    Serial.println();
    Serial.println("‚ùå WiFi connection failed!");
    wifiConnected = false;
  }
}

void testFlaskConnectivity() {
  Serial.println("=== Testing Flask Server Connectivity ===");
  
  HTTPClient http;
  String testUrl = "http://" + flaskServerIP + ":" + String(flaskServerPort) + "/api/esp32/test";
  
  Serial.println("Testing URL: " + testUrl);
  
  http.begin(testUrl);
  http.setTimeout(10000); // 10 second timeout
  
  int httpCode = http.GET();
  
  if (httpCode > 0) {
    String response = http.getString();
    Serial.println("‚úÖ Flask server connectivity: SUCCESS");
    Serial.println("HTTP Response Code: " + String(httpCode));
    Serial.println("Response: " + response);
  } else {
    Serial.println("‚ùå Flask server connectivity: FAILED");
    Serial.println("HTTP Error Code: " + String(httpCode));
    Serial.println("Make sure Flask server is running on " + flaskServerIP + ":" + String(flaskServerPort));
  }
  
  http.end();
  Serial.println("=== End Connectivity Test ===");
}

void setupWebServer() {
  // Route to control laser
  server.on("/laser/on", HTTP_GET, [](){
    digitalWrite(sensorControlPin, HIGH);
    Serial.println("Laser turned ON via HTTP");
    server.send(200, "application/json", "{\"status\":\"success\",\"message\":\"Laser ON\"}");
  });
  
  server.on("/laser/off", HTTP_GET, [](){
    digitalWrite(sensorControlPin, LOW);
    Serial.println("Laser turned OFF via HTTP");
    server.send(200, "application/json", "{\"status\":\"success\",\"message\":\"Laser OFF\"}");
  });
  
  // Route to get sensor status
  server.on("/sensor/status", HTTP_GET, [](){
    bool sensor0Blocked = (sensor0 < (threshold0 - detectionMargin));
    bool sensor1Blocked = (sensor1 < (threshold1 - detectionMargin));
    bool bothBlocked = sensor0Blocked && sensor1Blocked;
    
    String json = "{\"sensor_blocked\":" + String(bothBlocked ? "true" : "false") + 
                  ",\"sensor0_blocked\":" + String(sensor0Blocked ? "true" : "false") + 
                  ",\"sensor1_blocked\":" + String(sensor1Blocked ? "true" : "false") + 
                  ",\"threshold0\":" + String(threshold0) + 
                  ",\"threshold1\":" + String(threshold1) + 
                  ",\"sensor0\":" + String(sensor0) + 
                  ",\"sensor1\":" + String(sensor1) + 
                  ",\"detection_margin\":" + String(detectionMargin) + 
                  ",\"consecutive_readings\":" + String(currentConsecutive) + "}";
    server.send(200, "application/json", json);
  });
  
  // Route to recalibrate sensors
  server.on("/sensor/calibrate", HTTP_GET, [](){
    calibrateSensors();
    server.send(200, "application/json", "{\"status\":\"success\",\"message\":\"Calibration complete\",\"threshold0\":" + String(threshold0) + ",\"threshold1\":" + String(threshold1) + "}");
  });
  
  // Route to adjust sensitivity
  server.on("/sensor/sensitivity", HTTP_GET, [](){
    if (server.hasArg("margin")) {
      detectionMargin = server.arg("margin").toInt();
      Serial.println("Detection margin set to: " + String(detectionMargin));
    }
    if (server.hasArg("consecutive")) {
      consecutiveReadings = server.arg("consecutive").toInt();
      Serial.println("Consecutive readings set to: " + String(consecutiveReadings));
    }
    
    String json = "{\"status\":\"success\",\"detection_margin\":" + String(detectionMargin) + 
                  ",\"consecutive_readings\":" + String(consecutiveReadings) + "}";
    server.send(200, "application/json", json);
  });
  
  // Test route
  server.on("/test", HTTP_GET, [](){
    server.send(200, "application/json", "{\"status\":\"ESP32 is working\",\"ip\":\"" + WiFi.localIP().toString() + "\",\"mode\":\"dual_sensor\"}");
  });
  
  server.begin();
  Serial.println("HTTP server started on port 80");
  Serial.println("Test ESP32 at: http://" + WiFi.localIP().toString() + "/test");
  Serial.println("Sensor status: http://" + WiFi.localIP().toString() + "/sensor/status");
  Serial.println("Adjust sensitivity: http://" + WiFi.localIP().toString() + "/sensor/sensitivity?margin=50&consecutive=3");
}

void calibrateSensors() {
  Serial.println("Starting calibration...");
  Serial.println("‚ö†Ô∏è  Make sure BOTH sensors are NOT blocked during calibration!");
  Serial.println("Calibrating for 5 seconds...");
  
  int samples = 50; // More samples for better accuracy
  long sum0 = 0;
  long sum1 = 0;
  
  for (int i = 0; i < samples; i++) {
    sensor0 = analogRead(sensorPin0);
    sensor1 = analogRead(sensorPin1);
    sum0 += sensor0;
    sum1 += sensor1;
    
    if (i % 10 == 0) { // Print every 10th sample
      Serial.println("Sample " + String(i + 1) + "/" + String(samples) + ": S0=" + String(sensor0) + ", S1=" + String(sensor1));
    }
    delay(100);
  }
  
  threshold0 = sum0 / samples;
  threshold1 = sum1 / samples;
  
  Serial.println("‚úÖ Calibration complete!");
  Serial.println("Threshold0: " + String(threshold0) + " (trigger below: " + String(threshold0 - detectionMargin) + ")");
  Serial.println("Threshold1: " + String(threshold1) + " (trigger below: " + String(threshold1 - detectionMargin) + ")");
  Serial.println("Detection margin: " + String(detectionMargin));
  Serial.println("Consecutive readings needed: " + String(consecutiveReadings));
}

void loop() {
  server.handleClient();
  
  // Check WiFi connection
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi disconnected! Reconnecting...");
    wifiConnected = false;
    connectToWiFi();
  }
  
  // Read sensors
  sensor0 = analogRead(sensorPin0);
  sensor1 = analogRead(sensorPin1);
  
  // Check if both sensors are blocked (with margin for sensitivity)
  bool sensor0Blocked = (sensor0 < (threshold0 - detectionMargin));
  bool sensor1Blocked = (sensor1 < (threshold1 - detectionMargin));
  bool bothBlocked = sensor0Blocked && sensor1Blocked;
  
  // Require consecutive readings to confirm detection (reduce false positives)
  if (bothBlocked) {
    currentConsecutive++;
    if (currentConsecutive >= consecutiveReadings) {
      sent = 1; // Confirmed: Both sensors blocked
      if (currentConsecutive == consecutiveReadings) {
        Serial.println("üö® ALARM TRIGGERED: Both sensors blocked!");
      }
    }
  } else {
    if (currentConsecutive > 0) {
      Serial.println("Sensor blockage cleared - resetting consecutive count");
    }
    currentConsecutive = 0;
    sent = 0; // Not blocked or only one sensor blocked
  }
  
  // Enhanced debug output
  String statusMsg = "S0:" + String(sensor0) + "(T:" + String(threshold0) + "," + (sensor0Blocked ? "BLOCKED" : "CLEAR") + ") " +
                     "S1:" + String(sensor1) + "(T:" + String(threshold1) + "," + (sensor1Blocked ? "BLOCKED" : "CLEAR") + ") " +
                     "BOTH:" + (bothBlocked ? "BLOCKED" : "CLEAR") + " " +
                     "CONSEC:" + String(currentConsecutive) + "/" + String(consecutiveReadings) + " " +
                     "STATUS:" + (sent == 1 ? "ALARM" : "SAFE");
  
  Serial.println(statusMsg);
  
  // Send data every 2 seconds
  if (wifiConnected && (millis() - lastDataSent > 200)) {
    sendSensorDataToFlask();
    lastDataSent = millis();
  }
  
  delay(50); // Faster sampling for better detection
}

void sendSensorDataToFlask() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi not connected - skipping data send");
    return;
  }
  
  HTTPClient http;
  String url = "http://" + flaskServerIP + ":" + String(flaskServerPort) + "/api/esp32/sensor-data";
  
  http.begin(url);
  http.addHeader("Content-Type", "application/json");
  http.setTimeout(8000); // 8 second timeout
  
  // Enhanced JSON payload with individual sensor status
  bool sensor0Blocked = (sensor0 < (threshold0 - detectionMargin));
  bool sensor1Blocked = (sensor1 < (threshold1 - detectionMargin));
  
  String jsonPayload = "{\"sensor_blocked\":" + String(sent == 1 ? "true" : "false") + 
                       ",\"sensor0\":" + String(sensor0) + 
                       ",\"sensor1\":" + String(sensor1) + 
                       ",\"threshold0\":" + String(threshold0) + 
                       ",\"threshold1\":" + String(threshold1) + 
                       ",\"sensor0_blocked\":" + String(sensor0Blocked ? "true" : "false") + 
                       ",\"sensor1_blocked\":" + String(sensor1Blocked ? "true" : "false") + 
                       ",\"consecutive_count\":" + String(currentConsecutive) + 
                       ",\"detection_margin\":" + String(detectionMargin) + "}";
  
  Serial.println("üì§ Sending to Flask: " + jsonPayload);
  
  int httpResponseCode = http.POST(jsonPayload);
  
  if (httpResponseCode > 0) {
    String response = http.getString();
    Serial.println("‚úÖ Flask response [" + String(httpResponseCode) + "]: " + response);
    connectionFailures = 0;
  } else {
    connectionFailures++;
    Serial.println("‚ùå Flask error [" + String(httpResponseCode) + "] Failures: " + String(connectionFailures));
    
    if (connectionFailures >= 5) {
      Serial.println("Too many failures, testing connectivity...");
      testFlaskConnectivity();
      connectionFailures = 0;
    }
  }
  
  http.end();
}